
##
## The template wraps api calls to the radix platform to promote a deploment from one environment to another.
## As the radix jobs are async, the template will wait for a successfull or failed status by polling the api.
## A 600 second timeout has been implemented.
##
## Parameters required are the source environment, the to environment and name of the deployment job.
## 
## The deployment job name changes for each environment, so the response must be emitted in the job output.
## 
## This should be fetched by using `$[ stageDependencies ]' syntax. The stage and job name must be referenced.
## E.g. `$[ stageDependencies.STAGENAME.JOBNAME.outputs['JOBNAME.RADIXJOB.radixJobName'] ]`
## 

parameters:
- name: serviceConnection
  default: 'procosys - non-prod'
  displayName: 'Service Connection'
    
- name: fromNamespace
  type: string
  displayName: Kubernetes namespace to promote artifact from

- name: toNamespace
  type: string
  displayName: Kubernetes namespace to promote artifact to

- name: deploymentName
  type: string
  displayName: The deployment job name from the previous stage

- name: kubernetesResource
  default: 6dae42f8-4368-4678-94ff-3960e28e3630
- name: kubernetesApplication
  default: procosys-commissioning-webapp

- name: kubernetesUrl
  default: https://kubernetes.default.svc

steps:
- task: AzureCLI@2
  displayName: Promote deployment in Kubernetes
  name: KUBERNETESPROMOTE
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    addSpnToEnvironment: true
    scriptType: pscore
    scriptLocation: 'inlineScript'
    FailOnStandardError: true
    inlineScript: |
      $token = az account get-access-token --resource ${{ parameters.kubernetesResource }} --query=accessToken -otsv

      ## Get deployment from source namespace
      $getUrl = "${{ parameters.kubernetesUrl }}/apis/apps/v1/namespaces/${{ parameters.fromNamespace }}/deployments/${{ parameters.deploymentName }}"

      Write-Host "Sending GET to $getUrl"
      $deployment = Invoke-RestMethod -Method Get -Uri $getUrl -Headers @{"Authorization" = "Bearer $token" }
      
      ## Update namespace in the deployment
      $deployment.metadata.namespace = "${{ parameters.toNamespace }}"
      $deployment.spec.template.metadata.namespace = "${{ parameters.toNamespace }}"

      ## Promote to target namespace
      $postUrl = "${{ parameters.kubernetesUrl }}/apis/apps/v1/namespaces/${{ parameters.toNamespace }}/deployments"

      Write-Host "Sending POST to $postUrl"
      $resp = Invoke-RestMethod -Method Post -Uri $postUrl -Headers @{"Authorization" = "Bearer $token"; "Content-Type" = "application/json" } -Body ($deployment | ConvertTo-Json -Depth 10)
      Write-Host $resp

      ## Verify promotion status
      $checkUrl = "${{ parameters.kubernetesUrl }}/apis/apps/v1/namespaces/${{ parameters.toNamespace }}/deployments/${{ parameters.deploymentName }}/status"

      $checkStarted = Get-Date

      while ($true) {
        Write-Host "Checking promotion status..."
        $checkResp = Invoke-RestMethod -Uri $checkUrl -Headers @{"Authorization" = "Bearer $token" }                        
        
        Write-Host (ConvertTo-Json $checkResp -Depth 10 -Compress)

        if ($checkResp.status.conditions[0].status -eq "True") {              
          break;
        }
        
        if ( ((Get-Date) - $checkStarted).Seconds -gt 600) {
          Write-Host "Timeout..."
          throw "Kubernetes promotion took over 600 seconds, aborting..."
        }

        Start-Sleep -Seconds 10
      }

      Write-Host "Promotion in Kubernetes succeeded."
