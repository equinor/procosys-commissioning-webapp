trigger:
  branches:
    include:
    - domain-retired

resources:
  repositories:
  - repository: self
  - repository: templates
    type: github
    name: equinor/procosys-infra
    endpoint: 'equinor'

# Global variables for the pipeline
variables:
  - template: templates/variables/procosys-global-variables.yml@templates
  - template: templates/variables/comm-webapp-variables.yml@templates

  - name: 'repositoryName'
    value: procosys/comm-webapp

stages:
# Build Stage
- stage: build
  displayName: 'Build'
  variables:
    envName: 'build'
    serviceConnection: '${{ variables.nonProdServiceConnection }}'
    containerRegistry: '${{ variables.containerRegistryName }}'
    envGroupName: '$(globalPrefix)-$(fullAppName)-${{ variables.envName }}'
    dockerfilePath: '/Dockerfile'
    dockerRegistryServiceConnection: '$(dockerRegistryServiceConnectionName)'

  jobs:
  # Docker Build
  - template: /templates/pipelines/dockerbuild-comm-webapp.yml@templates
    parameters:
      dependsOn: ''
      deploymentName: 'docker_build'
      condition: and(always(), eq(variables['Build.Reason'], 'PullRequest'))
      buildCommand: build
      envGroup: '${{ variables.envGroupName }}'
      dockerfilePath: '${{ variables.dockerfilePath }}'
      buildContext: '$(Build.SourcesDirectory)'
      repository: '${{ variables.repositoryName }}'
      dockerRegistryServiceConnection: '$(dockerRegistryServiceConnectionName)'

  # Docker Build and Push
  - template: /templates/pipelines/dockerbuild-comm-webapp.yml@templates
    parameters:
      dependsOn: ''
      deploymentName: 'docker_build_push'
      condition: and(always(), ne(variables['Build.Reason'], 'PullRequest'))
      buildCommand: buildAndPush
      envGroup: '${{ variables.envGroupName }}'
      dockerfilePath: '${{ variables.dockerfilePath }}'
      buildContext: '$(Build.SourcesDirectory)'
      repository: '${{ variables.repositoryName }}'
      dockerRegistryServiceConnection: '$(dockerRegistryServiceConnectionName)'

# Deploy to Dev Stage
- stage: deployToDev
  displayName: 'Deploy to Dev'
  dependsOn: build
  variables:
    imageTagNamesFrontend: '$(Build.BuildId)' 
  jobs:
  - template: /templates/pipelines/radix-deploy.yml@templates
    parameters:
      serviceConnection: 'procosys - non-prod'
      imageTagNamesFrontend: '$(Build.BuildId)'  

# Promote to Test Stage
- stage: promoteToTest
  displayName: 'Promote to Test'
  dependsOn: deployToDev
  jobs:
  - template: /templates/pipelines/radix-promote-env.yml@templates
    parameters:
      serviceConnection: 'procosys - non-prod'
      fromNamespace: 'dev'
      toNamespace: 'test'
      deploymentName: $[ stageDependencies.deployToDev.KUBERNETESDEPLOY.outputs['KUBERNETESDEPLOY.deploymentName'] ]

# Promote to Prod Stage
# - stage: promoteToProd
#   displayName: 'Promote to Prod'
#   dependsOn: promoteToTest
#   jobs:
#   - template: /templates/pipelines/radix-promote-env.yml@templates
#     parameters:
#       serviceConnection: 'procosys - non-prod'
#       fromNamespace: 'test'
#       toNamespace: 'prod'
#       deploymentName: $[ stageDependencies.promoteToTest.KUBERNETESPROMOTE.outputs['KUBERNETESPROMOTE.deploymentName'] ]
